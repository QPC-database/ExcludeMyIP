upstream emi_server {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).

  server unix:/home/emi/src/run/gunicorn.sock fail_timeout=0;
}

ssl_certificate /etc/letsencrypt/live/www.excludemyip.com/fullchain.pem;
ssl_certificate_key /etc/letsencrypt/live/www.excludemyip.com/privkey.pem;
# Protect against POODLE attack by disabling SSLv2 and SSLv3:
ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

server {
    listen 80;
	include includes/emi-ip;
    server_name excludemyip.com $SERVER_IP;
    return 301 https://www.excludemyip.com$request_uri;
}

server {
    listen 443 ssl;
	include includes/emi-ip;
    server_name excludemyip.com $SERVER_IP;
    return 301 https://www.excludemyip.com$request_uri;
}

server {
    listen 443 ssl;
    server_name www.excludemyip.com;
	add_header Link "<$scheme://$http_host$request_uri>; rel=\"canonical\"";
	
	client_max_body_size 4G;
	
	access_log /home/emi/src/logs/nginx-access.log;
	error_log /home/emi/src/logs/nginx-error.log;
	
	location /static/ {
		alias /home/emi/src/static-collected/;
	}
	
	location /robots.txt {
		return 200 "User-agent: *\nDisallow:";
	}
	
	location / {
		# an HTTP header important enough to have its own Wikipedia entry:
		#   http://en.wikipedia.org/wiki/X-Forwarded-For
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	
		proxy_set_header X-Forwarded-Protocol $scheme;
	
		# pass the Host: header from the client right along so redirects
		# can be set properly within the Rack application
		proxy_set_header Host $http_host;
	
		# we don't want nginx trying to do something clever with
		# redirects, we set the Host: header above already.
		proxy_redirect off;
	
		# set "proxy_buffering off" *only* for Rainbows! when doing
		# Comet/long-poll stuff.  It's also safe to set if you're
		# using only serving fast clients with Unicorn + nginx.
		# Otherwise you _want_ nginx to buffer responses to slow
		# clients, really.
		# proxy_buffering off;
	
		# Try to serve static files from nginx, no point in making an
		# *application* server like Unicorn/Rainbows! serve static files.
		if (!-f $request_filename) {
			proxy_pass http://emi_server;
			break;
		}
	}
	
	# Error pages
	error_page 500 502 503 504 /500.html;
	location = /500.html {
		root /home/emi/src/static/;
	}
}